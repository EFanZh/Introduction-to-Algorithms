steps:
  - task: CacheBeta@0
    displayName: Cache Rustup (Linux, macOS)
    inputs:
        key: rustup | $(Agent.JobName) | $(Agent.OS)
        path: $(HOME)/.rustup
    condition: ne(variables['Agent.OS'], 'Windows_NT')
  - task: CacheBeta@0
    displayName: Cache Rustup (Windows)
    inputs:
        key: rustup | $(Agent.JobName) | $(Agent.OS)
        path: $(USERPROFILE)\.rustup
    condition: eq(variables['Agent.OS'], 'Windows_NT')
  - task: CacheBeta@0
    displayName: Cache Cargo (Linux, macOS)
    inputs:
        key: cargo | $(Agent.JobName) | $(Agent.OS)
        path: $(HOME)/.cargo
    condition: ne(variables['Agent.OS'], 'Windows_NT')
  - task: CacheBeta@0
    displayName: Cache Cargo (Windows)
    inputs:
        key: cargo | $(Agent.JobName) | $(Agent.OS)
        path: $(USERPROFILE)\.cargo
    condition: eq(variables['Agent.OS'], 'Windows_NT')
  - script: |
        set -e
        set -o pipefail
        for x in "$HOME/.rustup" "$HOME/.cargo"; do
            test -d "$x" && find "$x/" -type f -regex '.*/bin/[^/]+' -print -exec sudo chmod +x '{}' '+'
        done
    displayName: Fix executable bit (Linux, macOS)
    condition: ne(variables['Agent.OS'], 'Windows_NT')
  - script: |
        set -e
        set -o pipefail
        export PATH="$HOME/.cargo/bin:$PATH"
        which rustup || curl -f https://sh.rustup.rs | bash -s -- -y
        rustup default stable
        echo "##vso[task.prependpath]$HOME/.cargo/bin"
    displayName: Install Rust
    condition: eq(variables['Agent.OS'], 'Darwin')
  - script: rustup update
    displayName: Update Rust
  - bash: which cargo-install-update || cargo install cargo-update
    displayName: Install cargo-update
  - script: cargo install-update -a
    displayName: Update Cargo packages
