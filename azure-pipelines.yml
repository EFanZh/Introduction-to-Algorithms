jobs:
  - job: Rustfmt
    strategy:
        matrix:
            Linux:
                imageName: ubuntu-latest
            macOS:
                imageName: macOS-latest
            Windows:
                imageName: windows-latest
    pool:
        vmImage: $(imageName)
    steps:
      - template: .azure-pipelines/install-rust.yml
      - script: rustup component add rustfmt
        displayName: Install Rustfmt
      - script: cargo fmt -- --check
        displayName: Run Rustfmt checks
        continueOnError: true
  - job: Clippy
    strategy:
        matrix:
            Linux:
                imageName: ubuntu-latest
            macOS:
                imageName: macOS-latest
            Windows:
                imageName: windows-latest
    pool:
        vmImage: $(imageName)
    steps:
      - template: .azure-pipelines/install-rust.yml
      - script: rustup component add clippy
        displayName: Install Clippy
      - script: cargo clippy --all-targets --all-features -- -D warnings
        displayName: Run Clippy checks
        continueOnError: true
  - job: Tests
    strategy:
        matrix:
            Linux:
                imageName: ubuntu-latest
            macOS:
                imageName: macOS-latest
            Windows:
                imageName: windows-latest
    pool:
        vmImage: $(imageName)
    steps:
      - template: .azure-pipelines/install-rust.yml
      - script: cargo install-update -i cargo2junit
        displayName: Install cargo2junit
        condition: eq(variables['Agent.OS'], 'Linux')
      - script: cargo test -- -Z unstable-options --format json | tee >(cargo2junit > test-results.xml)
        displayName: Run tests (Linux)
        condition: eq(variables['Agent.OS'], 'Linux')
        continueOnError: true
      - script: cargo test
        displayName: Run tests (macOS, Windows)
        condition: ne(variables['Agent.OS'], 'Linux')
        continueOnError: true
      - task: PublishTestResults@2
        displayName: Publish test results
        condition: eq(variables['Agent.OS'], 'Linux')
        inputs:
            testResultsFiles: test-results.xml
  - job: Coverage
    pool:
        vmImage: ubuntu-latest
    steps:
      - template: .azure-pipelines/install-rust.yml
      - script: cargo install-update -i cargo-tarpaulin
        displayName: Install cargo-tarpaulin
      - script: cargo tarpaulin --out Xml
        displayName: Run coverage tests
        continueOnError: true
      - task: PublishCodeCoverageResults@1
        displayName: Publish coverage result
        inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: cobertura.xml
